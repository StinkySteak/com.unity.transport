{
  "name": "com.unity.transport",
  "displayName": "Unity Transport",
  "version": "2.0.2",
  "unity": "2022.2",
  "unityRelease": "0a18",
  "description": "Unity network transport layer - the low-level interface for connecting and sending data through a network",
  "dependencies": {
    "com.unity.collections": "2.1.4",
    "com.unity.burst": "1.8.4",
    "com.unity.mathematics": "1.2.6"
  },
  "relatedPackages": {
    "com.unity.transport.tests": "0.0.0"
  },
  "_upm": {
    "changelog": "### Changes\n* When using Unity Relay, `NetworkDriver.GetRemoteEndpoint` will now always return the address of the Relay server, instead of returning the address until a connection is established, and then returning the allocation ID encoded as an endpoint (appearing as an invalid endpoint). This makes the behavior the same as it was in version 1.X of the package.\n* Updated Collections dependency to 2.1.2.\n* A warning will now be emitted if passing a connection type other than \"wss\" to the `RelayServerData` constructors on WebGL (other connection types are not supported on that platform).\n\n### Fixes\n* Fixed an issue where the reliable pipeline stage could end up writing past the end of its internal buffer and thrashing the buffers of other connections. This could result in packet corruption, but would most likely result in erroneous -7 (`NetworkDriverParallelForErr`) errors being reported when calling `EndSend`.\n* Fixed an issue where upon returning -7 (`NetworkDriverParallelForErr`), `EndSend` would leak the send handle. Over time, this would result in less send handles being available, resulting in more -5 (`NetworkSendQueueFull`) errors.\n* Fixed an issue where WebSocket connections would always take at least `connectTimeoutMS` milliseconds to be reported as established, even if the connection was actually established faster than that.\n* Fixed an issue where `ArgumentOutOfRangeException` could be thrown in situations where a new WebSocket connection is established while a previous connection is in the process of being closed.\n* If nothing is received from a Unity Relay server for a while, the transport will now attempt to rebind to it. This should improve the accuracy of `GetRelayConnectionStatus` in scenarios where the Relay allocation times out while communications with the server are out.\n* Fixed an issue where `UDPNetworkInterface` (the default one) would not bind to the correct address if the local IP address change and the socket needs to be recreated (e.g. because the app was backgrounded on a mobile device).\n* Fixed an issue where `Disconnect` events would fail to be reported correctly for WebSocket connections.\n* Fixed an issue where, when using Relay, heartbeats would be sent constantly when they are disabled by setting `relayConnectionTimeMS` to 0 in the Relay parameters."
  },
  "upmCi": {
    "footprint": "7710c66ac941b52add3b21671eccd025a5899b40"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.transport@2.0/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/com.unity.transport.git",
    "type": "git",
    "revision": "db5ae79bb3752916ed2b57fcc112e0b4b052f227"
  },
  "samples": [
    {
      "displayName": "Cross-play Example",
      "description": "Example of how to use MultiNetworkDriver to create a server that accepts both UDP and WebSocket connections.",
      "path": "Samples~/CrossPlay"
    },
    {
      "displayName": "Jobified Client and Server",
      "description": "Very simple client and server implementations using jobs. Meant to tie in with the package documentation.",
      "path": "Samples~/JobifiedClientServer"
    },
    {
      "displayName": "Ping Sample",
      "description": "Small application to compute round-trip time (ping) between client and server.",
      "path": "Samples~/Ping"
    },
    {
      "displayName": "Ping Sample (with Relay)",
      "description": "Small application to compute round-trip time (ping) between client and host, using Unity Relay.",
      "path": "Samples~/RelayPing"
    },
    {
      "displayName": "Simple Client and Server",
      "description": "Simplest possible client and server implementations. Meant to tie in with the package documentation.",
      "path": "Samples~/SimpleClientServer"
    }
  ]
}
